"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.treeEditObjKey = exports.treeSetFieldArr = exports.treeSetTree = exports.treeSetObjArr = exports.treeSetFun = exports.treeSetData = exports.treeHasKey = exports.treeSearchArrByArr = exports.treeSearchByArr = exports.treeFindObjById = exports.treeGetObject = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; //前言：树tree：{ id: 1, children:[{ id: 2, children: [{ id: 3, children: { id: 4, } }] }] }
//树数组treeArr:[{ id: 1, children:[{ id: 2, children: [{ id: 3, children: { id: 4, } }] }] }]
//单层树treeObj:{ b: 1, children: { b: 2, children: { b: 3, children: { b: 4 } } } }

//查

//输入一个层，在一个树中，获取这个层的所有值
//示例console.log("示例：", treeGetObject(2,{a:1,children:{a:2,children: {a:3}}}));


var _obj = require("./obj");

var _arrFun = require("./arrFun");

var treeGetObject = exports.treeGetObject = function treeGetObject(layer, treeObj) {
  var children = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'children';

  var obj = null;
  if (!treeObj) {
    console.log('提示', '你传递的tree是空');
  }
  var treeObj_ = (0, _obj.cloneop)(treeObj);

  var loop = function loop(layer, treeObj_) {
    var lay = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

    lay++;
    if (layer !== lay && treeObj_[children]) {
      loop(layer, treeObj_[children], lay);
    } else {
      obj = treeObj_;
    }
  };

  loop(layer, treeObj_);
  return obj;
};

//通过主键在树数组中查找到对象    console.log('111111111示例：', treeFindObjById(3,[{ id: 1, children:[{ id: 2, children: [{ id: 3, children: { id: 8, } }] }] }]));
var treeFindObjById = exports.treeFindObjById = function treeFindObjById(id, tree) {
  var idTit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'id';
  var children = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'children';

  if (!tree) {
    console.log('提示', '你传递的tree是空');
  }
  var tree_ = (0, _obj.cloneop)(tree);
  var obj = null;
  if (!(0, _arrFun.isArrayop)(tree_)) {
    tree_ = [tree_];
  }

  var loop = function loop(tree) {
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = tree[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var i = _step.value;

        if (id === i[idTit]) {
          obj = i;
          break;
        } else {
          if (i[children] && i[children].length > 0) {
            loop(i[children]);
          }
        }
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  };

  loop(tree_);
  return obj;
};

//输入一个固定的数组，下标就是层，在树数组中，找出这个值，常见场景：给定一个url的数组，在导航菜单中找到那个最深的对象。console.log('111111111示例：', treeSearchByArr([{ id: 1, children:[{ id: 2, children: [{ id: 3, children: { id: 8, } }] }] }], [1, 2, 3]));
var treeSearchByArr = exports.treeSearchByArr = function treeSearchByArr(tree, arr) {
  var label = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'id';
  var children = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'children';

  var layer = 0;
  var obj = {};
  if (!tree) {
    console.log('提示', '你传递的tree是空');
  }
  var tree_ = (0, _obj.cloneop)(tree);
  if (!(0, _arrFun.isArrayop)(tree_)) {
    tree_ = [tree_];
  }
  var loop = function loop(tree_) {
    var layer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {

      for (var _iterator2 = tree_[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
        var i = _step2.value;

        if (i[label] === arr[layer]) {
          if (arr[layer + 1] && i[children] && i[children].length > 0) {
            loop(i[children], layer + 1);
          } else if (layer === arr.length - 1) {
            obj = i;
          }
        }
      }
    } catch (err) {
      _didIteratorError2 = true;
      _iteratorError2 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion2 && _iterator2.return) {
          _iterator2.return();
        }
      } finally {
        if (_didIteratorError2) {
          throw _iteratorError2;
        }
      }
    }
  };
  loop(tree_);
  return obj;
};

//与treeSearchByArr一样，但是返回的是一个从上至下的层级数组
var treeSearchArrByArr = exports.treeSearchArrByArr = function treeSearchArrByArr(tree, arr) {
  var label = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'id';
  var children = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'children';

  var layer = 0;
  var obj = [];
  if (!tree) {
    console.log('提示', '你传递的tree是空');
  }
  var tree_ = (0, _obj.cloneop)(tree);
  if (!(0, _arrFun.isArrayop)(tree_)) {
    tree_ = [tree_];
  }
  var loop = function loop(tree_) {
    if (layer === 0) {
      obj = [];
    }
    var _iteratorNormalCompletion3 = true;
    var _didIteratorError3 = false;
    var _iteratorError3 = undefined;

    try {
      for (var _iterator3 = tree_[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
        var i = _step3.value;

        if (i[label] === arr[layer]) {
          layer++;
          obj.push(i);
          if (arr[layer] && i[children] && i[children].length) {
            loop(i[children]);
          } else {
            break;
          }
        }
      }
    } catch (err) {
      _didIteratorError3 = true;
      _iteratorError3 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion3 && _iterator3.return) {
          _iterator3.return();
        }
      } finally {
        if (_didIteratorError3) {
          throw _iteratorError3;
        }
      }
    }
  };
  loop(tree_);
  return obj;
};

//树数组中是否包含某个键值     console.log('111111111示例：', treeHasKey([{ id: 1, children:[{ id: 2, children: [{ id: 3, children: { id: 8, } }] }] }],"id"));
var treeHasKey = exports.treeHasKey = function treeHasKey(tree, key) {
  var children = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'children';

  var isEqual = false;
  if (!tree) {
    console.log('提示', '你传递的tree是空');
    return isEqual;
  }
  var tree_ = (0, _obj.cloneop)(tree);
  if (!(0, _arrFun.isArrayop)(tree_)) {
    tree_ = [tree_];
  }

  var loop = function loop(node) {
    var _iteratorNormalCompletion4 = true;
    var _didIteratorError4 = false;
    var _iteratorError4 = undefined;

    try {
      for (var _iterator4 = node[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
        var i = _step4.value;

        if (i && i[key]) {
          isEqual = true;
          break;
        } else {
          var i_ = i[children];
          if (i_ && !(0, _arrFun.isArrayop)(i_)) {
            i_ = [i[children]];
          }
          if (i_ && i_.length > 0) {
            loop(i_);
          }
        }
      }
    } catch (err) {
      _didIteratorError4 = true;
      _iteratorError4 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion4 && _iterator4.return) {
          _iterator4.return();
        }
      } finally {
        if (_didIteratorError4) {
          throw _iteratorError4;
        }
      }
    }
  };
  loop(tree_);
  return isEqual;
};

//在树中获取一个下标的元素，拿到元素中所有层级的指定值，场景：多级联动时，获取一个从第一层到最后一层的默认值
// export let treeGetValue = (tree,index, key, children = 'children') => {
//   let isEqual = false;
//   if (!tree) {
//     console.log('提示', '你传递的tree是空');
//   }
//   let tree_ = cloneop(tree);
//   if (!isArrayop(tree_)) {
//     tree_ = [tree_];
//   }
//   let loop = node => {
//     for (let i of node) {
//       if (i && i[key]) {
//         isEqual = true;
//         break;
//       } else {
//         if (i[children] && i[children].length > 0) {
//           loop(i[children]);
//         }
//       }
//     }
//   };
//   loop(tree_);
//   return isEqual;
// };

//增


//删

//改
//给树数组结构遍历，并且在每个对象中写入一个属性,并且根据判断来添加      console.log('111111111示例：', treeSetData([{ id: 1, children:[{ id: 2, children: [{ id: 3, children: { id: 8, } }] }] }],"a",{b:1}));
var treeSetData = exports.treeSetData = function treeSetData() {
  var tree = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var field = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'zi';
  var obj = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var children = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'children';
  var judge = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : function () {
    return true;
  };

  if (!tree) {
    console.log('提示', '你传递的tree是空');
  }
  var tree_ = (0, _obj.cloneop)(tree);
  if (!(0, _arrFun.isArrayop)(tree_)) {
    tree_ = [tree_];
  }

  var loop = function loop(tree) {
    var _iteratorNormalCompletion5 = true;
    var _didIteratorError5 = false;
    var _iteratorError5 = undefined;

    try {
      for (var _iterator5 = tree[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
        var i = _step5.value;


        if (i[children] && i[children].length > 0) {
          loop(i[children]);
        }

        if (judge(i)) {
          if (typeof obj == 'function') {
            i[field] = obj();
          } else {
            i[field] = obj;
          }
        }
      }
    } catch (err) {
      _didIteratorError5 = true;
      _iteratorError5 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion5 && _iterator5.return) {
          _iterator5.return();
        }
      } finally {
        if (_didIteratorError5) {
          throw _iteratorError5;
        }
      }
    }
  };
  loop(tree_);
  return tree_;
};

//给树形结构遍历，并且在每个对象中写入一个对应的树属性,并且根据判断来添加
var treeSetFun = exports.treeSetFun = function treeSetFun() {
  var tree = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var field = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'zi';
  var fun = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function (data) {};
  var children = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'children';
  var judge = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : function () {
    return true;
  };

  if (!tree) {
    console.log('提示', '你传递的tree是空');
  }
  var tree_ = (0, _obj.cloneop)(tree);
  if (!(0, _arrFun.isArrayop)(tree_)) {
    tree_ = [tree_];
  }
  var loop = function loop(tree) {
    var layer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

    var lay = layer;
    lay++;

    var _iteratorNormalCompletion6 = true;
    var _didIteratorError6 = false;
    var _iteratorError6 = undefined;

    try {
      for (var _iterator6 = tree[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
        var i = _step6.value;

        if (judge(i)) {
          i[field] = fun(i);
        }
        if (i[children] && i[children].length > 0) {
          loop(i[children], lay);
        }
      }
    } catch (err) {
      _didIteratorError6 = true;
      _iteratorError6 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion6 && _iterator6.return) {
          _iterator6.return();
        }
      } finally {
        if (_didIteratorError6) {
          throw _iteratorError6;
        }
      }
    }
  };
  loop(tree_);
  return tree_;
};

//将一个对象数组中的每个元素，写入树的每个对象
// console.log(
//   '111111111示例：',
//   treeSetObjArr(
//     [
//       {
//         id: 1,
//         children: [{ id: 2, children: [{ id: 3, children: [{ id: 4 }] }] }],
//       },
//     ],[{ b: 1},{ a: 1}]
//   )
// );
var treeSetObjArr = exports.treeSetObjArr = function treeSetObjArr() {
  var tree = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var arr = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  var children = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'children';

  if (!tree) {
    console.log('提示', '你传递的tree是空');
  }
  var tree_ = (0, _obj.cloneop)(tree);
  if (!(0, _arrFun.isArrayop)(tree_)) {
    tree_ = [tree_];
  }

  var loop = function loop(tree) {
    var _iteratorNormalCompletion7 = true;
    var _didIteratorError7 = false;
    var _iteratorError7 = undefined;

    try {
      for (var _iterator7 = tree.keys()[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
        var i = _step7.value;
        var _iteratorNormalCompletion8 = true;
        var _didIteratorError8 = false;
        var _iteratorError8 = undefined;

        try {
          for (var _iterator8 = arr[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
            var t = _step8.value;

            tree[i] = _extends({}, t, tree[i]);
          }
        } catch (err) {
          _didIteratorError8 = true;
          _iteratorError8 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion8 && _iterator8.return) {
              _iterator8.return();
            }
          } finally {
            if (_didIteratorError8) {
              throw _iteratorError8;
            }
          }
        }

        if (tree[i][children] && tree[i][children].length > 0) {
          loop(tree[i][children]);
        }
      }
    } catch (err) {
      _didIteratorError7 = true;
      _iteratorError7 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion7 && _iterator7.return) {
          _iterator7.return();
        }
      } finally {
        if (_didIteratorError7) {
          throw _iteratorError7;
        }
      }
    }
  };
  loop(tree_);
  return tree_;
};

//给树形结构遍历，并且在每个对象中写入一个对应的树属性,并且根据判断来添加
// console.log(
//   '111111111示例：',
//   treeSetTree(
//     [
//       {
//         id: 1,
//         children: [{ id: 2, children: [{ id: 3, children: [{ id: 4 }] }] }],
//       },
//     ],
//     'a',
//     { b: 1, children: { b: 2, children: { b: 3, children: { b: 4 } } } }
//   )
// );
var treeSetTree = exports.treeSetTree = function treeSetTree() {
  var tree = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var field = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'zi';
  var treeObj = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var children = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'children';
  var treeChildren = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 'children';
  var judge = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : function () {
    return true;
  };

  if (!tree) {
    console.log('提示', '你传递的tree是空');
  }
  var tree_ = (0, _obj.cloneop)(tree);

  if (!(0, _arrFun.isArrayop)(tree_)) {
    tree_ = [tree_];
  }

  var loop = function loop(tree) {
    var layer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

    var lay = layer;
    lay++;
    var _iteratorNormalCompletion9 = true;
    var _didIteratorError9 = false;
    var _iteratorError9 = undefined;

    try {
      for (var _iterator9 = tree[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {
        var i = _step9.value;

        if (judge(i)) {
          var treeObjData = treeGetObject(lay, treeObj, treeChildren);
          i[field] = treeObjData;
        }
        if (i[children] && i[children].length > 0) {
          loop(i[children], lay);
        }
      }
    } catch (err) {
      _didIteratorError9 = true;
      _iteratorError9 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion9 && _iterator9.return) {
          _iterator9.return();
        }
      } finally {
        if (_didIteratorError9) {
          throw _iteratorError9;
        }
      }
    }
  };
  loop(tree_);
  return tree_;
};

// 根据给定的数据的层级对树中的属性，进行定义，场景：针对树形内的如name字段在不同的层级中用了，不同的写法这种
// console.log(
//   '111111111示例：',
//   treeSetFieldArr(
//     [
//       {
//         id: 1,
//         children: [{ id2: 2, children: [{ id3: 3, children: [{ id4: 4 }] }] }],
//       },
//     ],
//     ["id","id2","id3","id4"]
//   )
// );
var treeSetFieldArr = exports.treeSetFieldArr = function treeSetFieldArr() {
  var tree = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var arr = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  var firstKey = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'firstKey';
  var children = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'children';

  if (!tree) {
    console.log('提示', '你传递的tree是空');
  }
  var tree_ = (0, _obj.cloneop)(tree);

  if (!(0, _arrFun.isArrayop)(tree_)) {
    tree_ = [tree_];
  }
  var loop = function loop(tree) {
    var layer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

    var lay = layer;
    lay++;
    var _iteratorNormalCompletion10 = true;
    var _didIteratorError10 = false;
    var _iteratorError10 = undefined;

    try {
      for (var _iterator10 = tree[Symbol.iterator](), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {
        var i = _step10.value;

        i[firstKey] = i[arr[lay - 1]];
        if (i[children] && i[children].length > 0) {
          loop(i[children], lay);
        }
      }
    } catch (err) {
      _didIteratorError10 = true;
      _iteratorError10 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion10 && _iterator10.return) {
          _iterator10.return();
        }
      } finally {
        if (_didIteratorError10) {
          throw _iteratorError10;
        }
      }
    }
  };
  loop(tree_);
  return tree_;
};

//给树中的每个对象中的元素进行修改
var treeEditObjKey = exports.treeEditObjKey = function treeEditObjKey() {
  var tree = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var field = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'zi';
  var fun = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function (data) {
    return data;
  };
  var children = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'children';

  if (!tree) {
    console.log('提示', '你传递的tree是空');
  }
  var tree_ = (0, _obj.cloneop)(tree);
  if (!(0, _arrFun.isArrayop)(tree_)) {
    tree_ = [tree_];
  }

  var loop = function loop(tree) {
    var _iteratorNormalCompletion11 = true;
    var _didIteratorError11 = false;
    var _iteratorError11 = undefined;

    try {
      for (var _iterator11 = tree.keys()[Symbol.iterator](), _step11; !(_iteratorNormalCompletion11 = (_step11 = _iterator11.next()).done); _iteratorNormalCompletion11 = true) {
        var i = _step11.value;

        tree[i][field] = fun(tree[i][field]);
        if (tree[i][children] && tree[i][children].length > 0) {
          loop(tree[i][children]);
        }
      }
    } catch (err) {
      _didIteratorError11 = true;
      _iteratorError11 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion11 && _iterator11.return) {
          _iterator11.return();
        }
      } finally {
        if (_didIteratorError11) {
          throw _iteratorError11;
        }
      }
    }
  };
  loop(tree_);
  return tree_;
};