"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.isObjEmpty = isObjEmpty;
exports.cloneop = cloneop;
exports.isObject = isObject;

//判断是不是空对象
function isObjEmpty(obj) {
    return JSON.stringify(obj) == "{}";
}

//对象类
//比较两个对象是否一样、
var diffObj = exports.diffObj = function diffObj(obj1, obj2) {
    return JSON.stringify(obj1) !== JSON.stringify(obj2);
};

//深拷贝！！！！！，可以是对象也可以是数组
function cloneop(obj) {
    var copy = void 0;

    // Handle the 3 simple types, and null or undefined
    if (null == obj || 'object' != (typeof obj === "undefined" ? "undefined" : _typeof(obj))) return obj;

    // Handle Date
    if (obj instanceof Date) {
        copy = new Date();
        copy.setTime(obj.getTime());
        return copy;
    }

    // Handle Array
    if (obj instanceof Array) {
        copy = [];
        for (var i = 0, len = obj.length; i < len; i++) {
            copy[i] = cloneop(obj[i]);
        }
        return copy;
    }

    // Handle Object
    if (obj instanceof Object) {
        copy = {};
        for (var attr in obj) {
            if (obj.hasOwnProperty(attr)) copy[attr] = cloneop(obj[attr]);
        }
        return copy;
    }

    throw new Error("Unable to copy obj! Its type isn't supported.");
}

//判断是否是对象
function isObject(obj) {
    return Object.prototype.toString.call(obj) === '[object Object]';
}

//去除对象中指定的属性
var deleteObjKey = exports.deleteObjKey = function deleteObjKey() {
    var arr = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    var obj = arguments[1];
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
        for (var _iterator = arr[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var i = _step.value;

            delete obj[i];
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
            }
        } finally {
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }

    return obj;
};