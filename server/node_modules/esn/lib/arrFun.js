'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.arrNumberToString = exports.arrStringToNumber = exports.arrIndexSet = exports.swapArray = exports.stringArrAddValue = exports.arrChild = exports.arrDelIndex = exports.arrDelNull = exports.arrAdd = exports.arrKeySelected = exports.isArr1hasArr2 = exports.isArrayop = exports.arrLast = undefined;
exports.arrHasKey = arrHasKey;
exports.arrShowRandom = arrShowRandom;
exports.arrFindMax = arrFindMax;
exports.arrFindMin = arrFindMin;
exports.truncate = truncate;
exports.arrDelFirst = arrDelFirst;
exports.arrDelrepeat = arrDelrepeat;
exports.arrSort = arrSort;

var _obj = require('./obj');

var _string = require('./string');

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

//查
//数组获取最后一个元素
var arrLast = exports.arrLast = function arrLast(arr) {
    return arr[arr.length - 1];
};

//判断是不是数组
var isArrayop = exports.isArrayop = function isArrayop(arr) {
    return arr instanceof Array;
};

//查看数组1中的元素，在数组2中是否存在，若存在，则返回,arr1=[{name:1,key:1},{name:2,key:2}]  arr2=[1,2]
var isArr1hasArr2 = exports.isArr1hasArr2 = function isArr1hasArr2(arr1, arr2) {
    var arr1Key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'name';
    var fun = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : function () {};

    var arr = [];
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
        var _loop = function _loop() {
            var t = _step.value;

            var index = arr2.find(function (data, a) {
                return t[arr1Key] === data;
            });
            if (index) {
                arr.push(t);
            } else {
                fun();
            }
        };

        for (var _iterator = arr1[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            _loop();
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
            }
        } finally {
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }

    return arr;
};

//获取一个数组中，被选中的几个元素
var arrKeySelected = exports.arrKeySelected = function arrKeySelected(arr) {
    var judge = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function (data) {
        return true;
    };

    var arr_ = [];
    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
        for (var _iterator2 = arr[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var i = _step2.value;

            if (judge(i)) {
                arr_.push(i);
            }
        }
    } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion2 && _iterator2.return) {
                _iterator2.return();
            }
        } finally {
            if (_didIteratorError2) {
                throw _iteratorError2;
            }
        }
    }

    return arr_;
};

//判断数组中是否包含元素
function arrHasKey(arr, shan) {
    var zhi = arr.findIndex(function (value, index, arr) {
        return value == shan;
    });
    if (zhi == -1) {
        return false;
    } else {
        return true;
    }
}

//输入数组，会随机抽取数组中得一个值输出
function arrShowRandom(arr) {
    return arr[Math.floor(Math.random() * arr.length)];
}

//取最大值
function arrFindMax(arr) {
    return Math.max.apply(Math, arr);
}

//取最小值
function arrFindMin(arr) {
    return Math.min.apply(Math, arr);
}

//字符串数组相加并且返回
var arrAdd = exports.arrAdd = function arrAdd(arr) {
    var otherString = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";

    var value = "";
    var _iteratorNormalCompletion3 = true;
    var _didIteratorError3 = false;
    var _iteratorError3 = undefined;

    try {
        for (var _iterator3 = arr[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
            var i = _step3.value;

            value += otherString + i;
        }
    } catch (err) {
        _didIteratorError3 = true;
        _iteratorError3 = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion3 && _iterator3.return) {
                _iterator3.return();
            }
        } finally {
            if (_didIteratorError3) {
                throw _iteratorError3;
            }
        }
    }

    return value;
};

//删
//js删除数组最后一个元素
function truncate(arr) {
    var m = arr.slice(0);
    m.splice(m.length - 1, 1);
    return m;
};

//删除数组中得第一个出现得
function arrDelFirst(arr, shan) {
    var zhi = arr.findIndex(function (value, index, arr) {
        return value == shan;
    });
    if (zhi !== -1) {
        arr.splice(zhi, 1);
    }
    return arr;
}

//数组去除重复chongfu([1,2,3,4,5,1,1]),返回12345
function arrDelrepeat(arr) {
    var result = [],
        json = {};
    for (var i = 0, len = arr.length; i < len; i++) {
        if (!json[arr[i]]) {
            json[arr[i]] = 1;
            result.push(arr[i]); //返回没被删除的元素
        }
    }
    return result;
};

//删除数组中的空格null,undefined之类的包括字符串类型的
var arrDelNull = exports.arrDelNull = function arrDelNull(arr) {
    var arr_ = [];
    var _iteratorNormalCompletion4 = true;
    var _didIteratorError4 = false;
    var _iteratorError4 = undefined;

    try {
        for (var _iterator4 = arr[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
            var i = _step4.value;

            if (i !== "" && i !== null && i !== undefined && i !== "null" && i !== "undefined") {
                arr_.push(i);
            }
        }
    } catch (err) {
        _didIteratorError4 = true;
        _iteratorError4 = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion4 && _iterator4.return) {
                _iterator4.return();
            }
        } finally {
            if (_didIteratorError4) {
                throw _iteratorError4;
            }
        }
    }

    return arr_;
};

//js删除指定下标的元素
var arrDelIndex = exports.arrDelIndex = function arrDelIndex(arr, index) {
    var arr_ = (0, _obj.cloneop)(arr);
    arr_.splice(index, 1);
    return arr_;
};

//改
//将对象数组中的某个children塞进一个数组中
var arrChild = exports.arrChild = function arrChild(arr) {
    var arr_ = [];
    var _iteratorNormalCompletion5 = true;
    var _didIteratorError5 = false;
    var _iteratorError5 = undefined;

    try {
        for (var _iterator5 = arr[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
            var i = _step5.value;

            if (i.children) {
                arr_ = [].concat(_toConsumableArray(i.children), _toConsumableArray(arr_));
            }
        }
    } catch (err) {
        _didIteratorError5 = true;
        _iteratorError5 = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion5 && _iterator5.return) {
                _iterator5.return();
            }
        } finally {
            if (_didIteratorError5) {
                throw _iteratorError5;
            }
        }
    }

    return arr_;
};

//一个字符串数组，在每个数组前面加上一个固定字符，比如每个字符前面加上/成为url
var stringArrAddValue = exports.stringArrAddValue = function stringArrAddValue(arr) {
    var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "/";

    var _arr = [].concat(_toConsumableArray(arr));
    var _iteratorNormalCompletion6 = true;
    var _didIteratorError6 = false;
    var _iteratorError6 = undefined;

    try {
        for (var _iterator6 = _arr.keys()[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
            var i = _step6.value;

            _arr[i] = value + _arr[i];
        }
    } catch (err) {
        _didIteratorError6 = true;
        _iteratorError6 = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion6 && _iterator6.return) {
                _iterator6.return();
            }
        } finally {
            if (_didIteratorError6) {
                throw _iteratorError6;
            }
        }
    }

    return _arr;
};

//数组换位置[1,2,3] >>>>> [3,1,2]，arr是原数组，index1,2是需要换位置的2个元素的下标   console.log('111111111示例：', swapArray([1,2,3],1,2));  111111111示例： (3) [1, 3, 2]
var swapArray = exports.swapArray = function swapArray(arr, index1, index2) {
    arr[index1] = arr.splice(index2, 1, arr[index1])[0];
    return arr;
};

//在数组指定位置添加一个元素
var arrIndexSet = exports.arrIndexSet = function arrIndexSet(arr, index, value) {
    var arr_ = (0, _obj.cloneop)(arr);
    arr_.splice(index, 0, value);
    return arr_;
};

//将数组中的每个字符串都转成数字
var arrStringToNumber = exports.arrStringToNumber = function arrStringToNumber(arr) {
    var _arr = [];
    if (isArrayop(arr)) {
        var _iteratorNormalCompletion7 = true;
        var _didIteratorError7 = false;
        var _iteratorError7 = undefined;

        try {
            for (var _iterator7 = arr[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
                var i = _step7.value;

                _arr.push((0, _string.StringToNumber)(i));
            }
        } catch (err) {
            _didIteratorError7 = true;
            _iteratorError7 = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion7 && _iterator7.return) {
                    _iterator7.return();
                }
            } finally {
                if (_didIteratorError7) {
                    throw _iteratorError7;
                }
            }
        }
    }
    return _arr;
};

//将数组中的每个数字都转成字符串
var arrNumberToString = exports.arrNumberToString = function arrNumberToString(arr) {
    var _arr = [];
    if (isArrayop(arr)) {
        var _iteratorNormalCompletion8 = true;
        var _didIteratorError8 = false;
        var _iteratorError8 = undefined;

        try {
            for (var _iterator8 = arr[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
                var i = _step8.value;

                _arr.push(i.toString());
            }
        } catch (err) {
            _didIteratorError8 = true;
            _iteratorError8 = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion8 && _iterator8.return) {
                    _iterator8.return();
                }
            } finally {
                if (_didIteratorError8) {
                    throw _iteratorError8;
                }
            }
        }
    }
    return _arr;
};

//排序
//数组排序，默认随机排序
function arrSort(arr) {
    var zmp = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 3;

    arr.sort(function (a, b) {
        if (zmp == 1) {
            return a - b; //从小到大排
        } else if (zmp == 2) {
            return b - a; //从大到小排
        } else {
            return Math.random() - 0.5; //数组洗牌
        }
    });
    return arr;
}